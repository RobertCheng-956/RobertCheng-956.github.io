[{"title":"Hello World!","url":"/2023/12/23/HelloWorld/","content":"This is my first postThis blog website is built by Hexo and GitHub Pages. Generally speaking, this whole process isn’t that difficult. In the beginning, I thought this will take me enormous time, but with my passion pushes me forward. Then I watch about 10 videos about how to building a personal blog website. Among these videos, there lots of tools to build a blog web, as well as lots of tools to host this web. I was confused by so many choices. The last, I choose the way that does not spend my money - hosting with GitHub Pages.\nAlright, once I decide the tools to host my web. It’s will be easier to choose tools to build my web. Now you can see, I used Hexo to make it. Actually, I made this decision only this morning. But I successfully push it to GitHub Pages at about 17 o’clock, only several hours spent. That’s why I said that this whole process isn’t that difficult.\nHowever, this merely the very first step I made. There’s a long way to build a sound web. And I hold that a blog web is built to publish my articles, not building for the sake of building a blog web.\nOK! This is my first blog on this website, and I am going to upload all my writings before into this blog web.\n","categories":["介绍"],"tags":["欢迎"]},{"title":"如何通过GitHub Desktop创建Pull Request？","url":"/2023/12/23/How-to-create-pull-request/","content":"Technical writer小白如何成为开源项目的贡献者？想要参与到GitHub中的开源项目，我们需要明白整个贡献的流程是如何完成的。\n整个流程实际上就是一个问题：如何能够修改GitHub网页中别人仓库中呈现出来的文档？\n什么是仓库？可以理解为一个仓库实际上就是一个项目，里面存放着所有和项目相关的文件，所有人都能够去浏览，纠错。我们所说的成为贡献者就是去为别人的仓库发现问题、解决问题。\n以此次的pingcap的文档挑战赛为例子，pingcap是一个用户，docs就是一个仓库，里面就放着各种各样的文档，对应着他们的产品TIDB（一个数据库产品）。\n作为technical writer，我们可以做的就是去查看仓库中一些文档，发现并解决问题，比如：\n\n文档内容是否能够表意清晰\n文档格式是否正确（是否符合markdown文件的格式要求）\n文档是否能够正确引导别人使用TiDB（前提肯定是你要对这个产品十分了解）\n\n如何对这个仓库中的文件进行修改？有三个概念需要先了解：\n\nGitHub上别人的仓库（这里就是docs这个仓库，是属于pingcap这个用户的。）\nGitHub上自己的仓库（后面我们就需要把docs这个仓库复制一个给我们自己，这叫做fork）\n自己电脑上的仓库（你修改文件的时候是在自己电脑中进行的，是离线的，所以电脑上也需要docs这个仓库，这叫做clone）\n\n这一个流程可以简单概括为：\n\nfork仓库：在GitHub中将别人的仓库（pingcap的docs仓库），在GitHub上先复制一个给你自己（这就叫fork）；\nclone仓库：然后将你自己的这个仓库，下载到本地来（clone），这样一来，你才能够在本地进行修改；\n修改文件：你能够在你的电脑上进行修改了；\n提交文件：将你做出的修改上传到GitHub上你自己的那个仓库，此时你GitHub上的仓库就和你电脑上那个仓库是一模一样了；\n请求修改：然后你要请求将自己的修改传到pingcap的那个docs仓库中去，等待审核。\n\n什么？你说为什么这么复杂？直接在pingcap那个仓库里面改不就好了？你要知道，人家pingcap那个仓库是公开的，如果人人都能直接在那个仓库修改的话，那以谁为准呢？\n通过你自己GitHub上自己那个docs仓库中转一下，人家pingcap的docs仓库才能有条不紊的处理来自各个国家，各个贡献者的修改。\n什么？你说直接在本地修改然后提交给pingcap那个仓库的审核员审核不就好了？要中转干嘛GitHub上你自己的那个docs仓库当然不仅仅是中转，更重要的版本控制功能。\n往往，修改是不能一次到位的，你修改完之后，发现你修改了大半天全弄错了，但是现在这个文档已经面目全非，咋办？你心里想我现在要是能够回到过去就好了。\nYes，通过你每次将修改提交给你自己的那个docs仓库，你能够回到你之前的任意一个提交的版本。\n这大概就是整个修改的流程了，但是在各个环节还有很多细节需要讲解，但是只要你明白了这整个提交流程的逻辑，那你理解和操作起来就会十分顺手。接下来我们就来看看，具体的操作流程是怎么样的。\n第一步：fork别人的docs仓库进入目标仓库页面，点击右上角的fork，即可fork到自己的仓库。\n   \n第二步：clone自己仓库中那个docs仓库\n点击最右上角的头像，点击Your repositories进入自己的个人仓库，找到刚刚fork好的那个仓库，点击进入。\n\n\n点击绿色的code按钮，可以看到有三种不同的方式进行克隆\n\n\n\n一是通过链接\n\n二是通过GitHub Desktop打开\n\n三是通过下载安装包打开\n\n\n\n3.这里我们点击Open with GitHub Desktop打开，网页就会显示出请求打开GitHub Desktop的请求，点击允许\n\n查看这个文档安装 GitHub Desktop。\n安装很简单，不需要配置什么，安装路径都不需要选择，下载完之后点击安装就完事了。安装好了之后，在登陆好就行了。\n\n4.可以看到在GitHub Desktop中就会弹出克隆这个仓库的请求，这里需要记住你克隆的地址，因为后续需要都对本地文件做出修改。\n\n第三步：在本地仓库中修改文件3.1确保本地仓库和上游保持一致1.在每次开始工作前，要查看本地的master分支是否与上游的master分支同步。\n\n分支这个概念我们在下一步骤会讲到，你可以理解为不同的分支，就是不同的仓库版本，master就是最主要的分支。\n这一步的目的，是保证你电脑上本地的这个仓库的master分支能够和pingcap的那个仓库的master分支保持同步，毕竟人家那个仓库是时时刻刻在变化的，而你本地上的那个不是。如果不同步的话，最终请求的时候会起冲突。\n\n\n点击上方窗口顶端的Branch→Merge into Current Branch\n\n在弹出的搜索框中搜索master\n\n选中下方的upstream/master\n\n然后点击Merge按钮。\n\n\n\n这里有两种情况：\n\n其实我们刚刚才进行了fork，clone的操作，这么短的时间上游是不会有什么改变的，所以你会发现，在选择 upstream&#x2F;master 后，界面底部会有当前 master branch 已为最新的提示。而且，Merge upstream&#x2F;master into master 会呈现浅蓝色，如图所示。这时直接就可以进行第四步：提交文件到GitHub中自己的docs仓库了\n\n上游有改变。比如你今天clone好了仓库，但是今天没有修改完成，明天接着修改，这一段时间间隔中，上游仓库就发生了改变，此时这个按钮就是可以点击的，你就需要进行Merge upstream&#x2F;master into master这一操作了。\n\n 这一步意味着，你把上游仓库masterf分支的的变化，merge到了你本地仓库里的master分支，直接跳过了你GitHub上的那一个仓库，所以，你还需要进行push origin这一步，把你本地master分支的变化，推到你GitHub仓库里的master分支中。\n\n\n\n2.点击 Push origin，将刚刚 Merge 到本地 master branch的变化推至GitHub上自己的docs仓库，这样一操作完，pincap仓库的master分支，你本地电脑上的master分支，和你GitHub上仓库的master分支，就都同步了。\n3.2 创建分支1.通过点击上方工具栏中的Current Branch新建分支，来开始修改文件。新建分支的名称，应当是对自己的修改进行一个简单总结。\n\n分支实际上就是一个个不同的仓库版本，创建分支也就是创建一个master副本，在这个副本中进行具体的修改。这是为了方便管理，这样无论我们如何修改都不会影响到主分支。\n最终我们提交到pingcap&#x2F;docs仓库的，就是将这一整个分支都提交过去。你会看到这个仓库里本来就有很多分支，这些就是其他贡献者为了贡献自己的修改而创建的。\n如果你的贡献有价值，那么最终审核者就会将你的分支merge到pingcap&#x2F;docs那个仓库中去，就成功贡献了。\n\n\n2.点击新建之后，会弹出你这个分支是基于那个分支的，一般我们都是基于master的。\n\n3.新建分支成功后，可以看到上方的Current Branch已经切换到了新建的分支。\n\n3.点击下方的Open the repository in your external editor，在自己的本地编辑器中进行编辑修改。\n\n这里我推荐的编辑器是visual studio code，下载教程请看\n\n\n第四步：提交文件这后面的几张图我不小心换成了docs-cn仓库，不影响你们的操作\n在进行这一步之前，我们用术语来了解一下之前说的那个流程。\n\n首先我们知道了三个概念：\n\n一个是最开始pingcap的docs仓库\n一个是你自己GitHub上的那个docs仓库（从pingcap那fork过来的）\n一个是你克隆到本地的那个自己电脑上的docs仓库（就是那些本地文件夹）\n\n知道了这三个概念之后，我们来讲一下，commit，publish，create pull request 这三个东西。理解之后，你就大致能够明白整个流程关系了。\n\ncommit：将你自己在新建分支中做的那些修改先缓存在电脑里，也就是说你每次修改完之后，就点击commit，然后添加以下description来描述你修改了什么，先缓存着，方便下次接着修改。（此时修改还在你自己电脑上）\npublish：将缓存的这个分支提交到你自己GitHub上的docs仓库。（此时修改同步到了你的GitHub上了）\ncreate pull request：将你自己GitHub中的docs仓库里的分支，在拉取请求，让pingcap那边的reviewer来审查，看你的修改是否有价值。如果你的修改是有价值的，那么你的pull request就会被合并（merge）。（此时修改请求已经提交给pingcap的docs仓库，等待审核即可。）\n\n\n以上就是整个提交部分的流程。\n1.在你打开本地编辑器后，只要你做出了任何修改，回到GitHub Desktop中来，会自动显示你进行了哪些修改，红色就是删除了哪些东西，绿色就是增加的哪些东西。\n\n2.点击左下方的commit进行提交，在点击提交之前，需要在commit按钮上方的Summary中简单总结自己的修改，就像之前创建分支时，新建分支名一样。\n\n记住，只要你要进行离开这个分支的操作，那你就要先commit提交到缓存中去，不然就会丢失掉你修改的内容。\n3.然后点击上方工具栏第三个按钮Publish branch将新建的分支和和你在这个分支上的修改，提交的Commit都同步到你GitHub的那个docs仓库中去。\n\n4.然后点击界面上的preview pull request，预览一下你修改的文件，再次确认是否正确\n\n5.你会看到以下界面，然后点击Create Pull Request按钮请求上游仓库拉取。\n\n6.然后就会自动跳转到网页端pingcap&#x2F;docs仓库的提交pull request界面，仓库的管理员已经预设了一个模板，你按照要求填好就行了，主要是确认你是否已经签订了协议，修改了哪些地方，以及修改的是哪个版本。\n\n然后等待审核就行了。\n","tags":["GitHub"]},{"title":"Pingcap/TiDB文档挑战赛 - 贡献翻译教程","url":"/2023/12/23/turorial/","content":"1. GitHub &amp; GitHub DesktopGitHubGitHub 是一个基于 web 的提供版本控制和托管服务的平台。大多数程序员都比较熟悉，上面有很多开源项目，可以参与进去，也可以自己创建或维护一个项目。\nGitHub: https://github.com/\n\n我的 GitHub 个人主页是：RobertCheng-956\n\nGitHub是世界上最大的开源平台，如今世界上已经有了1亿用户。\n\nGitHub Desktop刚刚提到了Github是一个版本控制和托管服务的平台，如何进行版本控制，如何将本地的文件托管到GitHub上，这就涉及到了GitHub Desktop。GitHub Desktop是一个软件，在提交翻译文件的过程中需要使用，具体的流程和步骤，往后看。\n2. 为什么使用GitHub进行文档写作使用GitHub进行文档写作的优势\n版本控制： GitHub基于Git，提供了强大的版本控制功能。这意味着你可以轻松地跟踪文档的修改历史，了解每个版本的变更，回溯到之前的版本，以及协同编辑文档而不用担心冲突。\n分支和合并： 使用分支可以让不同的作者独立地编辑文档的不同部分，而不会影响到主分支。通过合并分支，可以将各自的修改整合到主文档中，有序地管理多个人的贡献。\n协同编辑： GitHub支持多人同时编辑文档，而无需手动合并更改。每个人都可以创建自己的分支，进行编辑，然后通过Pull Request请求将其更改合并到主文档中，便于审查和讨论。\n问题追踪： GitHub的问题追踪系统可以用于讨论文档中的问题、提出改进建议或报告错误。这种集成的讨论平台有助于组织协作者之间的反馈，促进文档的改进。\nMarkdown支持： GitHub广泛支持Markdown格式，这使得编写简洁、易读的文档变得简单。Markdown的语法清晰，并且可以直接在GitHub上进行预览。\n社区协作： GitHub是一个庞大的开发者社区，许多项目和团队都在这里分享文档。这意味着你可以从其他人的经验中学习，并向开源社区贡献自己的文档。\n访问控制： GitHub提供了对仓库的访问控制，可以设置不同的权限级别，确保只有授权人员才能编辑或审查文档。\n\n其中最主要的就是，协同编辑和版本控制，其中协同编辑，不仅仅指的是technical writer来进行编辑，文档的用户也可以通过提交自己的Pull Request来进行修改，同时用户也能够提Issue来反馈文档中存在的问题。\n注册GitHub教程：注册Github账号详细教程\n前置要求：科学上网（虽然不使用科学上网也能够使用GitHub，但是访问速度会比较慢。）\n3. Pingcap 翻译文档贡献指南整体的流程如下：\n\nfork到网页端自己的仓库；\n克隆网页端的那个仓库到desktop\n点击上方的branch → merge into current branch → 找到upstrema/master并选中 → 点击下方的Merge upstrea/master into master按钮\n如果本地仓库的 master 已与上游仓库的 master 内容一致，在选择 upstream/master 后，界面底部会有当前 master branch 已为最新的提示。而且，Merge upstream/master into master 会呈现浅蓝色。此时，就不必再进行内容同步了，可直接进入第 5 步。\n新建一个 branch；\n在新建的 branch 上修改文件；\ncommit修改\npublish新文档\n提一个 Pull Request；\nReviewer 进行 review 并通过；\n将新文档 merge 到 master branch。\n\n详情请看上一篇文档 How to create pull request\n此处需要强调的是：\n\n\n当认领了中文仓库 pingcap&#x2F;docs-cn的一个待翻译 PR 后，你需要在英文仓库 pingcap&#x2F;docs 建一个对应的英文 PR。\n当认领了英文仓库 pingcap&#x2F;docs 的一个待翻译 PR 后，你需要在中文仓库 pingcap&#x2F;docs-cn 建一个对应的中文 PR。\n\n\n","tags":["GitHub"]}]